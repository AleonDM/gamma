import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './TeamPage.css';

const TeamPage = () => {
  const { teamId } = useParams();
  const navigate = useNavigate();
  
  const [team, setTeam] = useState(null);
  const [tournaments, setTournaments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [teamCode, setTeamCode] = useState('');
  
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã
    const storedTeamCode = localStorage.getItem('teamCode');
    if (storedTeamCode) {
      setTeamCode(storedTeamCode);
    }
    
    loadTeamData();
  }, [teamId]);
  
  const loadTeamData = async () => {
    try {
      setLoading(true);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ: —Å–æ–∑–¥–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
      let teamData;
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API
        const teamResponse = await axios.get(`/api/teams/${teamId}`);
        teamData = teamResponse.data;
      } catch (apiErr) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ API:', apiErr);
        
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
        teamData = {
          id: parseInt(teamId) || 1,
          name: `–ö–æ–º–∞–Ω–¥–∞ ${teamId}`,
          code: teamId === "1" ? "team1" : "team2", // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–¥—ã
          members: JSON.stringify([
            { name: "–ò–≥—Ä–æ–∫ 1", role: "–ö–∞–ø–∏—Ç–∞–Ω" },
            { name: "–ò–≥—Ä–æ–∫ 2", role: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" },
            { name: "–ò–≥—Ä–æ–∫ 3", role: "–ö–µ—Ä—Ä–∏" }
          ]),
          tournaments: JSON.stringify([1, 2])
        };
      }
      
      setTeam(teamData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const storedTeamCode = localStorage.getItem('teamCode');
      if (storedTeamCode === 'admin' || storedTeamCode === teamData.code) {
        setIsAuthorized(true);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –∫–æ–º–∞–Ω–¥—ã
      if (teamData.tournaments) {
        let tournamentIds = [];
        try {
          tournamentIds = typeof teamData.tournaments === 'string'
            ? JSON.parse(teamData.tournaments)
            : teamData.tournaments;
          
          if (tournamentIds && tournamentIds.length > 0) {
            try {
              // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –∏–∑ API
              const tournamentsResponse = await axios.get('/api/tournaments');
              
              // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ ID
              const teamTournaments = tournamentsResponse.data.filter(tournament => 
                tournamentIds.includes(tournament.id)
              );
              
              setTournaments(teamTournaments);
            } catch (tournErr) {
              console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –∏–∑ API:', tournErr);
              
              // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
              setTournaments([
                {
                  id: 1,
                  name: "–¢—É—Ä–Ω–∏—Ä –ø–æ Dota 2",
                  discipline: "dota2",
                  date: new Date().toISOString(),
                  status: "upcoming"
                },
                {
                  id: 2,
                  name: "–¢—É—Ä–Ω–∏—Ä –ø–æ CS 2",
                  discipline: "cs2",
                  date: new Date().toISOString(),
                  status: "completed"
                }
              ]);
            }
          }
        } catch (parseErr) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', parseErr);
        }
      }
      
      setError(null);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ');
    } finally {
      setLoading(false);
    }
  };
  
  const handleLogout = () => {
    localStorage.removeItem('teamCode');
    setIsAuthorized(false);
    setTeamCode('');
  };
  
  const handleLogin = async (e) => {
    e.preventDefault();
    
    if (!teamCode.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã');
      return;
    }
    
    try {
      if (team && teamCode === team.code) {
        localStorage.setItem('teamCode', teamCode);
        setIsAuthorized(true);
        setError(null);
      } else if (teamCode === 'admin') {
        localStorage.setItem('teamCode', 'admin');
        setIsAuthorized(true);
        setError(null);
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  };
  
  if (loading) {
    return (
      <div className="team-page loading">
        <div className="loading-message">
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ...</p>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="team-page">
        <div className="error-message">
          <p>{error}</p>
          <button onClick={() => navigate('/')} className="back-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }
  
  if (!team) {
    return (
      <div className="team-page">
        <div className="error-message">
          <p>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
          <button onClick={() => navigate('/')} className="back-button">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }
  
  // –ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–æ–π
  const members = typeof team.members === 'string'
    ? JSON.parse(team.members)
    : team.members || [];
  
  return (
    <div className="team-page">
      <div className="team-header">
        <div className="team-title-block">
          <h1>{team.name}</h1>
          <div className="team-code">
            –ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {isAuthorized ? team.code : '***********'}
          </div>
        </div>
        
        <div className="team-actions">
          {isAuthorized ? (
            <button onClick={handleLogout} className="logout-button">
              –í—ã–π—Ç–∏
            </button>
          ) : (
            <form onSubmit={handleLogin} className="login-form">
              <input
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã"
                value={teamCode}
                onChange={(e) => setTeamCode(e.target.value)}
              />
              <button type="submit" className="login-button">
                –í–æ–π—Ç–∏
              </button>
            </form>
          )}
          
          <button onClick={() => navigate('/')} className="back-button">
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
      
      <div className="team-content">
        <section className="team-section members-section">
          <h2 className="section-title">–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã</h2>
          {isAuthorized ? (
            <div className="team-members-list">
              {members.length > 0 ? (
                members.map((member, index) => (
                  <div key={index} className="team-member-item">
                    <div className="member-avatar">
                      {member.name.charAt(0)}
                    </div>
                    <div className="member-info">
                      <span className="member-name">{member.name}</span>
                      {member.role && (
                        <span className="member-role">{member.role}</span>
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="no-data">
                  <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–∞–≤–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
                </div>
              )}
            </div>
          ) : (
            <div className="locked-content">
              <div className="lock-icon">üîí</div>
              <p>–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞</p>
            </div>
          )}
        </section>

        {isAuthorized && (
          <section className="team-section">
            <h2 className="section-title">–¢—É—Ä–Ω–∏—Ä—ã –∫–æ–º–∞–Ω–¥—ã</h2>
            <div className="team-tournaments-list">
              {tournaments.length > 0 ? (
                tournaments.map(tournament => (
                  <div key={tournament.id} className="team-tournament-item">
                    <div className="tournament-info">
                      <span className="tournament-name">{tournament.name}</span>
                      <span className="tournament-date">{new Date(tournament.date).toLocaleDateString('ru-RU')}</span>
                      <span className={`tournament-status status-${getStatusClass(tournament.status)}`}>
                        {getStatusText(tournament.status)}
                      </span>
                      {tournament.result && (
                        <span className={`tournament-place place-${tournament.result.place}`}>
                          {tournament.result.place} –º–µ—Å—Ç–æ
                        </span>
                      )}
                    </div>
                  </div>
                ))
              ) : (
                <div className="no-data">
                  <p>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</p>
                </div>
              )}
            </div>
          </section>
        )}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStatusText(status) {
  switch (status) {
    case 'upcoming':
      return '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π';
    case 'registration':
      return '–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
    case 'ongoing':
      return '–ü—Ä–æ—Ö–æ–¥–∏—Ç';
    case 'completed':
      return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    default:
      return status;
  }
}

function getStatusClass(status) {
  switch (status) {
    case 'upcoming':
      return 'upcoming';
    case 'registration':
      return 'registration';
    case 'ongoing':
      return 'live';
    case 'completed':
      return 'completed';
    default:
      return 'default';
  }
}

export default TeamPage; 