import { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './TeamDetailsPage.css';
import { ADMIN_CODE } from '../utils/env';

const TeamDetailsPage = () => {
  const { teamId } = useParams();
  const navigate = useNavigate();
  const [team, setTeam] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const teamCode = localStorage.getItem('teamCode');
    if (teamCode === ADMIN_CODE) {
      setIsAdmin(true);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ
    const loadTeam = async () => {
      try {
        setLoading(true);
        const response = await axios.get(`/api/teams/${teamId}`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const teamData = response.data;
        if (typeof teamData.members === 'string') {
          teamData.members = JSON.parse(teamData.members);
        }
        if (typeof teamData.tournaments === 'string') {
          teamData.tournaments = JSON.parse(teamData.tournaments);
        }
        
        setTeam(teamData);
        setError(null);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–µ:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setLoading(false);
      }
    };

    loadTeam();
  }, [teamId]);

  const handleEditClick = () => {
    navigate(`/admin/teams/edit/${teamId}`);
  };

  const handleBackClick = () => {
    navigate(-1);
  };

  if (loading) {
    return (
      <div className="team-details-page loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="team-details-page error">
        <div className="error-icon">‚ö†Ô∏è</div>
        <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <button className="back-button" onClick={handleBackClick}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è
        </button>
      </div>
    );
  }

  if (!team) {
    return (
      <div className="team-details-page not-found">
        <div className="not-found-icon">üîç</div>
        <h2>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
        <p>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞</p>
        <button className="back-button" onClick={handleBackClick}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è
        </button>
      </div>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  const members = Array.isArray(team.members) ? team.members : [];

  return (
    <div className="team-details-page">
      <div className="team-details-header">
        <h1>{team.name}</h1>
        {isAdmin && (
          <button className="edit-team-button" onClick={handleEditClick}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
        )}
      </div>
      
      <div className="team-details-content">
        <div className="team-info-block">
          <div className="team-code-info">
            <h3>–ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã</h3>
            <p>{team.code}</p>
          </div>
        </div>
        
        <div className="team-members-block">
          <h3>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã</h3>
          {members.length > 0 ? (
            <ul className="members-list">
              {members.map((member, index) => (
                <li key={index} className="member-item">
                  <div className="member-name">{member.name}</div>
                  {member.role && <div className="member-role">{member.role}</div>}
                </li>
              ))}
            </ul>
          ) : (
            <p className="no-data">–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∫–æ–º–∞–Ω–¥—ã</p>
          )}
          
          {team.tournaments && team.tournaments.length > 0 && (
            <div className="team-tournaments">
              <h3>–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö</h3>
              <ul className="tournaments-list">
                {team.tournaments.map((tournament, index) => (
                  <li key={index} className="tournament-item">
                    <Link to={`/tournaments/${tournament.id}`} className="tournament-link">
                      {tournament.name}
                    </Link>
                    <span className="tournament-discipline">{tournament.discipline}</span>
                    <span className="tournament-date">{tournament.date}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TeamDetailsPage; 